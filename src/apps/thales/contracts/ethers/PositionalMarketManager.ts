/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface PositionalMarketManagerInterface extends utils.Interface {
  functions: {
    'acceptOwnership()': FunctionFragment;
    'activeMarkets(uint256,uint256)': FunctionFragment;
    'addWhitelistedAddress(address)': FunctionFragment;
    'capitalRequirement()': FunctionFragment;
    'createMarket(bytes32,uint256,uint256,uint256,bool,address)': FunctionFragment;
    'customMarketCreationEnabled()': FunctionFragment;
    'decrementTotalDeposited(uint256)': FunctionFragment;
    'disableWhitelistedAddresses()': FunctionFragment;
    'durations()': FunctionFragment;
    'enableWhitelistedAddresses()': FunctionFragment;
    'expireMarkets(address[])': FunctionFragment;
    'incrementTotalDeposited(uint256)': FunctionFragment;
    'initialize(address,address,address,uint256,uint256,uint256)': FunctionFragment;
    'isActiveMarket(address)': FunctionFragment;
    'isKnownMarket(address)': FunctionFragment;
    'lastPauseTime()': FunctionFragment;
    'marketCreationEnabled()': FunctionFragment;
    'maturedMarkets(uint256,uint256)': FunctionFragment;
    'migrateMarkets(address,bool,address[])': FunctionFragment;
    'nominateNewOwner(address)': FunctionFragment;
    'nominatedOwner()': FunctionFragment;
    'numActiveMarkets()': FunctionFragment;
    'numMaturedMarkets()': FunctionFragment;
    'onlyWhitelistedAddressesCanCreateMarkets()': FunctionFragment;
    'owner()': FunctionFragment;
    'paused()': FunctionFragment;
    'positionalMarketFactory()': FunctionFragment;
    'priceFeed()': FunctionFragment;
    'receiveMarkets(bool,address[])': FunctionFragment;
    'removeWhitelistedAddress(address)': FunctionFragment;
    'resolveMarket(address)': FunctionFragment;
    'sUSD()': FunctionFragment;
    'setCreatorCapitalRequirement(uint256)': FunctionFragment;
    'setCustomMarketCreationEnabled(bool)': FunctionFragment;
    'setExpiryDuration(uint256)': FunctionFragment;
    'setMarketCreationEnabled(bool)': FunctionFragment;
    'setMaxTimeToMaturity(uint256)': FunctionFragment;
    'setMigratingManager(address)': FunctionFragment;
    'setOwner(address)': FunctionFragment;
    'setPaused(bool)': FunctionFragment;
    'setPositionalMarketFactory(address)': FunctionFragment;
    'setPriceFeed(address)': FunctionFragment;
    'setWhitelistedAddresses(address[])': FunctionFragment;
    'setsUSD(address)': FunctionFragment;
    'totalDeposited()': FunctionFragment;
    'transferOwnershipAtInit(address)': FunctionFragment;
    'transferSusdTo(address,address,uint256)': FunctionFragment;
    'whitelistedAddresses(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptOwnership'
      | 'activeMarkets'
      | 'addWhitelistedAddress'
      | 'capitalRequirement'
      | 'createMarket'
      | 'customMarketCreationEnabled'
      | 'decrementTotalDeposited'
      | 'disableWhitelistedAddresses'
      | 'durations'
      | 'enableWhitelistedAddresses'
      | 'expireMarkets'
      | 'incrementTotalDeposited'
      | 'initialize'
      | 'isActiveMarket'
      | 'isKnownMarket'
      | 'lastPauseTime'
      | 'marketCreationEnabled'
      | 'maturedMarkets'
      | 'migrateMarkets'
      | 'nominateNewOwner'
      | 'nominatedOwner'
      | 'numActiveMarkets'
      | 'numMaturedMarkets'
      | 'onlyWhitelistedAddressesCanCreateMarkets'
      | 'owner'
      | 'paused'
      | 'positionalMarketFactory'
      | 'priceFeed'
      | 'receiveMarkets'
      | 'removeWhitelistedAddress'
      | 'resolveMarket'
      | 'sUSD'
      | 'setCreatorCapitalRequirement'
      | 'setCustomMarketCreationEnabled'
      | 'setExpiryDuration'
      | 'setMarketCreationEnabled'
      | 'setMaxTimeToMaturity'
      | 'setMigratingManager'
      | 'setOwner'
      | 'setPaused'
      | 'setPositionalMarketFactory'
      | 'setPriceFeed'
      | 'setWhitelistedAddresses'
      | 'setsUSD'
      | 'totalDeposited'
      | 'transferOwnershipAtInit'
      | 'transferSusdTo'
      | 'whitelistedAddresses',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'activeMarkets', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'addWhitelistedAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'capitalRequirement', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'createMarket',
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, boolean, string],
  ): string;
  encodeFunctionData(functionFragment: 'customMarketCreationEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decrementTotalDeposited', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'disableWhitelistedAddresses', values?: undefined): string;
  encodeFunctionData(functionFragment: 'durations', values?: undefined): string;
  encodeFunctionData(functionFragment: 'enableWhitelistedAddresses', values?: undefined): string;
  encodeFunctionData(functionFragment: 'expireMarkets', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'incrementTotalDeposited', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'isActiveMarket', values: [string]): string;
  encodeFunctionData(functionFragment: 'isKnownMarket', values: [string]): string;
  encodeFunctionData(functionFragment: 'lastPauseTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'marketCreationEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maturedMarkets', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'migrateMarkets', values: [string, boolean, string[]]): string;
  encodeFunctionData(functionFragment: 'nominateNewOwner', values: [string]): string;
  encodeFunctionData(functionFragment: 'nominatedOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'numActiveMarkets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'numMaturedMarkets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'onlyWhitelistedAddressesCanCreateMarkets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'positionalMarketFactory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'priceFeed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'receiveMarkets', values: [boolean, string[]]): string;
  encodeFunctionData(functionFragment: 'removeWhitelistedAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'resolveMarket', values: [string]): string;
  encodeFunctionData(functionFragment: 'sUSD', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setCreatorCapitalRequirement', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setCustomMarketCreationEnabled', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setExpiryDuration', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setMarketCreationEnabled', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setMaxTimeToMaturity', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setMigratingManager', values: [string]): string;
  encodeFunctionData(functionFragment: 'setOwner', values: [string]): string;
  encodeFunctionData(functionFragment: 'setPaused', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setPositionalMarketFactory', values: [string]): string;
  encodeFunctionData(functionFragment: 'setPriceFeed', values: [string]): string;
  encodeFunctionData(functionFragment: 'setWhitelistedAddresses', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'setsUSD', values: [string]): string;
  encodeFunctionData(functionFragment: 'totalDeposited', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnershipAtInit', values: [string]): string;
  encodeFunctionData(functionFragment: 'transferSusdTo', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'whitelistedAddresses', values: [string]): string;

  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activeMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addWhitelistedAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'capitalRequirement', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'customMarketCreationEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decrementTotalDeposited', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableWhitelistedAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'durations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableWhitelistedAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'expireMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'incrementTotalDeposited', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isActiveMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isKnownMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastPauseTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketCreationEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maturedMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrateMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominateNewOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominatedOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numActiveMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numMaturedMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onlyWhitelistedAddressesCanCreateMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'positionalMarketFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'receiveMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeWhitelistedAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolveMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sUSD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCreatorCapitalRequirement', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCustomMarketCreationEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setExpiryDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMarketCreationEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxTimeToMaturity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMigratingManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPositionalMarketFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPriceFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWhitelistedAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setsUSD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalDeposited', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnershipAtInit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferSusdTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistedAddresses', data: BytesLike): Result;

  events: {
    'CreatorCapitalRequirementUpdated(uint256)': EventFragment;
    'ExpiryDurationUpdated(uint256)': EventFragment;
    'MarketCreated(address,address,bytes32,uint256,uint256,uint256,address,address,bool,address)': EventFragment;
    'MarketCreationEnabledUpdated(bool)': EventFragment;
    'MarketExpired(address)': EventFragment;
    'MarketsMigrated(address,address[])': EventFragment;
    'MarketsReceived(address,address[])': EventFragment;
    'MaxTimeToMaturityUpdated(uint256)': EventFragment;
    'OwnerChanged(address,address)': EventFragment;
    'OwnerNominated(address)': EventFragment;
    'PauseChanged(bool)': EventFragment;
    'SetCustomMarketCreationEnabled(bool)': EventFragment;
    'SetMigratingManager(address)': EventFragment;
    'SetPositionalMarketFactory(address)': EventFragment;
    'SetPriceFeed(address)': EventFragment;
    'SetZeroExAddress(address)': EventFragment;
    'SetsUSD(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CreatorCapitalRequirementUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExpiryDurationUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketCreationEnabledUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketExpired'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketsMigrated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketsReceived'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxTimeToMaturityUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerNominated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PauseChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetCustomMarketCreationEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetMigratingManager'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetPositionalMarketFactory'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetPriceFeed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetZeroExAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetsUSD'): EventFragment;
}

export interface CreatorCapitalRequirementUpdatedEventObject {
  value: BigNumber;
}
export type CreatorCapitalRequirementUpdatedEvent = TypedEvent<
  [BigNumber],
  CreatorCapitalRequirementUpdatedEventObject
>;

export type CreatorCapitalRequirementUpdatedEventFilter = TypedEventFilter<CreatorCapitalRequirementUpdatedEvent>;

export interface ExpiryDurationUpdatedEventObject {
  duration: BigNumber;
}
export type ExpiryDurationUpdatedEvent = TypedEvent<[BigNumber], ExpiryDurationUpdatedEventObject>;

export type ExpiryDurationUpdatedEventFilter = TypedEventFilter<ExpiryDurationUpdatedEvent>;

export interface MarketCreatedEventObject {
  market: string;
  creator: string;
  oracleKey: string;
  strikePrice: BigNumber;
  maturityDate: BigNumber;
  expiryDate: BigNumber;
  up: string;
  down: string;
  customMarket: boolean;
  customOracle: string;
}
export type MarketCreatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, string, string, boolean, string],
  MarketCreatedEventObject
>;

export type MarketCreatedEventFilter = TypedEventFilter<MarketCreatedEvent>;

export interface MarketCreationEnabledUpdatedEventObject {
  enabled: boolean;
}
export type MarketCreationEnabledUpdatedEvent = TypedEvent<[boolean], MarketCreationEnabledUpdatedEventObject>;

export type MarketCreationEnabledUpdatedEventFilter = TypedEventFilter<MarketCreationEnabledUpdatedEvent>;

export interface MarketExpiredEventObject {
  market: string;
}
export type MarketExpiredEvent = TypedEvent<[string], MarketExpiredEventObject>;

export type MarketExpiredEventFilter = TypedEventFilter<MarketExpiredEvent>;

export interface MarketsMigratedEventObject {
  receivingManager: string;
  markets: string[];
}
export type MarketsMigratedEvent = TypedEvent<[string, string[]], MarketsMigratedEventObject>;

export type MarketsMigratedEventFilter = TypedEventFilter<MarketsMigratedEvent>;

export interface MarketsReceivedEventObject {
  migratingManager: string;
  markets: string[];
}
export type MarketsReceivedEvent = TypedEvent<[string, string[]], MarketsReceivedEventObject>;

export type MarketsReceivedEventFilter = TypedEventFilter<MarketsReceivedEvent>;

export interface MaxTimeToMaturityUpdatedEventObject {
  duration: BigNumber;
}
export type MaxTimeToMaturityUpdatedEvent = TypedEvent<[BigNumber], MaxTimeToMaturityUpdatedEventObject>;

export type MaxTimeToMaturityUpdatedEventFilter = TypedEventFilter<MaxTimeToMaturityUpdatedEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<[string, string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface OwnerNominatedEventObject {
  newOwner: string;
}
export type OwnerNominatedEvent = TypedEvent<[string], OwnerNominatedEventObject>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface PauseChangedEventObject {
  isPaused: boolean;
}
export type PauseChangedEvent = TypedEvent<[boolean], PauseChangedEventObject>;

export type PauseChangedEventFilter = TypedEventFilter<PauseChangedEvent>;

export interface SetCustomMarketCreationEnabledEventObject {
  enabled: boolean;
}
export type SetCustomMarketCreationEnabledEvent = TypedEvent<[boolean], SetCustomMarketCreationEnabledEventObject>;

export type SetCustomMarketCreationEnabledEventFilter = TypedEventFilter<SetCustomMarketCreationEnabledEvent>;

export interface SetMigratingManagerEventObject {
  manager: string;
}
export type SetMigratingManagerEvent = TypedEvent<[string], SetMigratingManagerEventObject>;

export type SetMigratingManagerEventFilter = TypedEventFilter<SetMigratingManagerEvent>;

export interface SetPositionalMarketFactoryEventObject {
  _positionalMarketFactory: string;
}
export type SetPositionalMarketFactoryEvent = TypedEvent<[string], SetPositionalMarketFactoryEventObject>;

export type SetPositionalMarketFactoryEventFilter = TypedEventFilter<SetPositionalMarketFactoryEvent>;

export interface SetPriceFeedEventObject {
  _address: string;
}
export type SetPriceFeedEvent = TypedEvent<[string], SetPriceFeedEventObject>;

export type SetPriceFeedEventFilter = TypedEventFilter<SetPriceFeedEvent>;

export interface SetZeroExAddressEventObject {
  _zeroExAddress: string;
}
export type SetZeroExAddressEvent = TypedEvent<[string], SetZeroExAddressEventObject>;

export type SetZeroExAddressEventFilter = TypedEventFilter<SetZeroExAddressEvent>;

export interface SetsUSDEventObject {
  _address: string;
}
export type SetsUSDEvent = TypedEvent<[string], SetsUSDEventObject>;

export type SetsUSDEventFilter = TypedEventFilter<SetsUSDEvent>;

export interface PositionalMarketManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PositionalMarketManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    activeMarkets(index: BigNumberish, pageSize: BigNumberish, overrides?: CallOverrides): Promise<[string[]]>;

    addWhitelistedAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    capitalRequirement(overrides?: CallOverrides): Promise<[BigNumber]>;

    createMarket(
      oracleKey: BytesLike,
      strikePrice: BigNumberish,
      maturity: BigNumberish,
      initialMint: BigNumberish,
      customMarket: boolean,
      customOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    customMarketCreationEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    decrementTotalDeposited(
      delta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    disableWhitelistedAddresses(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    durations(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        expiryDuration: BigNumber;
        maxTimeToMaturity: BigNumber;
      }
    >;

    enableWhitelistedAddresses(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    expireMarkets(
      markets: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    incrementTotalDeposited(
      delta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _owner: string,
      _sUSD: string,
      _priceFeed: string,
      _expiryDuration: BigNumberish,
      _maxTimeToMaturity: BigNumberish,
      _creatorCapitalRequirement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isActiveMarket(candidate: string, overrides?: CallOverrides): Promise<[boolean]>;

    isKnownMarket(candidate: string, overrides?: CallOverrides): Promise<[boolean]>;

    lastPauseTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketCreationEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    maturedMarkets(index: BigNumberish, pageSize: BigNumberish, overrides?: CallOverrides): Promise<[string[]]>;

    migrateMarkets(
      receivingManager: string,
      active: boolean,
      marketsToMigrate: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    numActiveMarkets(overrides?: CallOverrides): Promise<[BigNumber]>;

    numMaturedMarkets(overrides?: CallOverrides): Promise<[BigNumber]>;

    onlyWhitelistedAddressesCanCreateMarkets(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    positionalMarketFactory(overrides?: CallOverrides): Promise<[string]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    receiveMarkets(
      active: boolean,
      marketsToReceive: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removeWhitelistedAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    resolveMarket(
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    sUSD(overrides?: CallOverrides): Promise<[string]>;

    setCreatorCapitalRequirement(
      _creatorCapitalRequirement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setCustomMarketCreationEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setExpiryDuration(
      _expiryDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMarketCreationEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMaxTimeToMaturity(
      _maxTimeToMaturity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMigratingManager(
      manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setOwner(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setPaused(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPositionalMarketFactory(
      _positionalMarketFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPriceFeed(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWhitelistedAddresses(
      _whitelistedAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setsUSD(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    totalDeposited(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnershipAtInit(
      proxyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferSusdTo(
      sender: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    whitelistedAddresses(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  activeMarkets(index: BigNumberish, pageSize: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

  addWhitelistedAddress(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  capitalRequirement(overrides?: CallOverrides): Promise<BigNumber>;

  createMarket(
    oracleKey: BytesLike,
    strikePrice: BigNumberish,
    maturity: BigNumberish,
    initialMint: BigNumberish,
    customMarket: boolean,
    customOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  customMarketCreationEnabled(overrides?: CallOverrides): Promise<boolean>;

  decrementTotalDeposited(
    delta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  disableWhitelistedAddresses(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  durations(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber] & {
      expiryDuration: BigNumber;
      maxTimeToMaturity: BigNumber;
    }
  >;

  enableWhitelistedAddresses(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  expireMarkets(
    markets: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  incrementTotalDeposited(
    delta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _owner: string,
    _sUSD: string,
    _priceFeed: string,
    _expiryDuration: BigNumberish,
    _maxTimeToMaturity: BigNumberish,
    _creatorCapitalRequirement: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isActiveMarket(candidate: string, overrides?: CallOverrides): Promise<boolean>;

  isKnownMarket(candidate: string, overrides?: CallOverrides): Promise<boolean>;

  lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

  marketCreationEnabled(overrides?: CallOverrides): Promise<boolean>;

  maturedMarkets(index: BigNumberish, pageSize: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

  migrateMarkets(
    receivingManager: string,
    active: boolean,
    marketsToMigrate: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  nominateNewOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  numActiveMarkets(overrides?: CallOverrides): Promise<BigNumber>;

  numMaturedMarkets(overrides?: CallOverrides): Promise<BigNumber>;

  onlyWhitelistedAddressesCanCreateMarkets(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  positionalMarketFactory(overrides?: CallOverrides): Promise<string>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  receiveMarkets(
    active: boolean,
    marketsToReceive: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  removeWhitelistedAddress(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  resolveMarket(
    market: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  sUSD(overrides?: CallOverrides): Promise<string>;

  setCreatorCapitalRequirement(
    _creatorCapitalRequirement: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setCustomMarketCreationEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setExpiryDuration(
    _expiryDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMarketCreationEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMaxTimeToMaturity(
    _maxTimeToMaturity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMigratingManager(
    manager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setOwner(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setPaused(
    _paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPositionalMarketFactory(
    _positionalMarketFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPriceFeed(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setWhitelistedAddresses(
    _whitelistedAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setsUSD(_address: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  totalDeposited(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnershipAtInit(
    proxyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferSusdTo(
    sender: string,
    receiver: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  whitelistedAddresses(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    activeMarkets(index: BigNumberish, pageSize: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

    addWhitelistedAddress(_address: string, overrides?: CallOverrides): Promise<void>;

    capitalRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    createMarket(
      oracleKey: BytesLike,
      strikePrice: BigNumberish,
      maturity: BigNumberish,
      initialMint: BigNumberish,
      customMarket: boolean,
      customOracle: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    customMarketCreationEnabled(overrides?: CallOverrides): Promise<boolean>;

    decrementTotalDeposited(delta: BigNumberish, overrides?: CallOverrides): Promise<void>;

    disableWhitelistedAddresses(overrides?: CallOverrides): Promise<void>;

    durations(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        expiryDuration: BigNumber;
        maxTimeToMaturity: BigNumber;
      }
    >;

    enableWhitelistedAddresses(overrides?: CallOverrides): Promise<void>;

    expireMarkets(markets: string[], overrides?: CallOverrides): Promise<void>;

    incrementTotalDeposited(delta: BigNumberish, overrides?: CallOverrides): Promise<void>;

    initialize(
      _owner: string,
      _sUSD: string,
      _priceFeed: string,
      _expiryDuration: BigNumberish,
      _maxTimeToMaturity: BigNumberish,
      _creatorCapitalRequirement: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    isActiveMarket(candidate: string, overrides?: CallOverrides): Promise<boolean>;

    isKnownMarket(candidate: string, overrides?: CallOverrides): Promise<boolean>;

    lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

    marketCreationEnabled(overrides?: CallOverrides): Promise<boolean>;

    maturedMarkets(index: BigNumberish, pageSize: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

    migrateMarkets(
      receivingManager: string,
      active: boolean,
      marketsToMigrate: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    nominateNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    numActiveMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    numMaturedMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    onlyWhitelistedAddressesCanCreateMarkets(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    positionalMarketFactory(overrides?: CallOverrides): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    receiveMarkets(active: boolean, marketsToReceive: string[], overrides?: CallOverrides): Promise<void>;

    removeWhitelistedAddress(_address: string, overrides?: CallOverrides): Promise<void>;

    resolveMarket(market: string, overrides?: CallOverrides): Promise<void>;

    sUSD(overrides?: CallOverrides): Promise<string>;

    setCreatorCapitalRequirement(_creatorCapitalRequirement: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setCustomMarketCreationEnabled(enabled: boolean, overrides?: CallOverrides): Promise<void>;

    setExpiryDuration(_expiryDuration: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMarketCreationEnabled(enabled: boolean, overrides?: CallOverrides): Promise<void>;

    setMaxTimeToMaturity(_maxTimeToMaturity: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMigratingManager(manager: string, overrides?: CallOverrides): Promise<void>;

    setOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    setPaused(_paused: boolean, overrides?: CallOverrides): Promise<void>;

    setPositionalMarketFactory(_positionalMarketFactory: string, overrides?: CallOverrides): Promise<void>;

    setPriceFeed(_address: string, overrides?: CallOverrides): Promise<void>;

    setWhitelistedAddresses(_whitelistedAddresses: string[], overrides?: CallOverrides): Promise<void>;

    setsUSD(_address: string, overrides?: CallOverrides): Promise<void>;

    totalDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnershipAtInit(proxyAddress: string, overrides?: CallOverrides): Promise<void>;

    transferSusdTo(sender: string, receiver: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    whitelistedAddresses(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'CreatorCapitalRequirementUpdated(uint256)'(value?: null): CreatorCapitalRequirementUpdatedEventFilter;
    CreatorCapitalRequirementUpdated(value?: null): CreatorCapitalRequirementUpdatedEventFilter;

    'ExpiryDurationUpdated(uint256)'(duration?: null): ExpiryDurationUpdatedEventFilter;
    ExpiryDurationUpdated(duration?: null): ExpiryDurationUpdatedEventFilter;

    'MarketCreated(address,address,bytes32,uint256,uint256,uint256,address,address,bool,address)'(
      market?: null,
      creator?: string | null,
      oracleKey?: BytesLike | null,
      strikePrice?: null,
      maturityDate?: null,
      expiryDate?: null,
      up?: null,
      down?: null,
      customMarket?: null,
      customOracle?: null,
    ): MarketCreatedEventFilter;
    MarketCreated(
      market?: null,
      creator?: string | null,
      oracleKey?: BytesLike | null,
      strikePrice?: null,
      maturityDate?: null,
      expiryDate?: null,
      up?: null,
      down?: null,
      customMarket?: null,
      customOracle?: null,
    ): MarketCreatedEventFilter;

    'MarketCreationEnabledUpdated(bool)'(enabled?: null): MarketCreationEnabledUpdatedEventFilter;
    MarketCreationEnabledUpdated(enabled?: null): MarketCreationEnabledUpdatedEventFilter;

    'MarketExpired(address)'(market?: null): MarketExpiredEventFilter;
    MarketExpired(market?: null): MarketExpiredEventFilter;

    'MarketsMigrated(address,address[])'(receivingManager?: null, markets?: null): MarketsMigratedEventFilter;
    MarketsMigrated(receivingManager?: null, markets?: null): MarketsMigratedEventFilter;

    'MarketsReceived(address,address[])'(migratingManager?: null, markets?: null): MarketsReceivedEventFilter;
    MarketsReceived(migratingManager?: null, markets?: null): MarketsReceivedEventFilter;

    'MaxTimeToMaturityUpdated(uint256)'(duration?: null): MaxTimeToMaturityUpdatedEventFilter;
    MaxTimeToMaturityUpdated(duration?: null): MaxTimeToMaturityUpdatedEventFilter;

    'OwnerChanged(address,address)'(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    'OwnerNominated(address)'(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;

    'PauseChanged(bool)'(isPaused?: null): PauseChangedEventFilter;
    PauseChanged(isPaused?: null): PauseChangedEventFilter;

    'SetCustomMarketCreationEnabled(bool)'(enabled?: null): SetCustomMarketCreationEnabledEventFilter;
    SetCustomMarketCreationEnabled(enabled?: null): SetCustomMarketCreationEnabledEventFilter;

    'SetMigratingManager(address)'(manager?: null): SetMigratingManagerEventFilter;
    SetMigratingManager(manager?: null): SetMigratingManagerEventFilter;

    'SetPositionalMarketFactory(address)'(_positionalMarketFactory?: null): SetPositionalMarketFactoryEventFilter;
    SetPositionalMarketFactory(_positionalMarketFactory?: null): SetPositionalMarketFactoryEventFilter;

    'SetPriceFeed(address)'(_address?: null): SetPriceFeedEventFilter;
    SetPriceFeed(_address?: null): SetPriceFeedEventFilter;

    'SetZeroExAddress(address)'(_zeroExAddress?: null): SetZeroExAddressEventFilter;
    SetZeroExAddress(_zeroExAddress?: null): SetZeroExAddressEventFilter;

    'SetsUSD(address)'(_address?: null): SetsUSDEventFilter;
    SetsUSD(_address?: null): SetsUSDEventFilter;
  };

  estimateGas: {
    acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    activeMarkets(index: BigNumberish, pageSize: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    addWhitelistedAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    capitalRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    createMarket(
      oracleKey: BytesLike,
      strikePrice: BigNumberish,
      maturity: BigNumberish,
      initialMint: BigNumberish,
      customMarket: boolean,
      customOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    customMarketCreationEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    decrementTotalDeposited(
      delta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    disableWhitelistedAddresses(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    durations(overrides?: CallOverrides): Promise<BigNumber>;

    enableWhitelistedAddresses(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    expireMarkets(markets: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    incrementTotalDeposited(
      delta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _sUSD: string,
      _priceFeed: string,
      _expiryDuration: BigNumberish,
      _maxTimeToMaturity: BigNumberish,
      _creatorCapitalRequirement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isActiveMarket(candidate: string, overrides?: CallOverrides): Promise<BigNumber>;

    isKnownMarket(candidate: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

    marketCreationEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    maturedMarkets(index: BigNumberish, pageSize: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    migrateMarkets(
      receivingManager: string,
      active: boolean,
      marketsToMigrate: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    nominateNewOwner(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    numActiveMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    numMaturedMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    onlyWhitelistedAddressesCanCreateMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    positionalMarketFactory(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    receiveMarkets(
      active: boolean,
      marketsToReceive: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    removeWhitelistedAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    resolveMarket(market: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    sUSD(overrides?: CallOverrides): Promise<BigNumber>;

    setCreatorCapitalRequirement(
      _creatorCapitalRequirement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setCustomMarketCreationEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setExpiryDuration(
      _expiryDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMarketCreationEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMaxTimeToMaturity(
      _maxTimeToMaturity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMigratingManager(
      manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setOwner(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setPaused(_paused: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setPositionalMarketFactory(
      _positionalMarketFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setPriceFeed(_address: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setWhitelistedAddresses(
      _whitelistedAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setsUSD(_address: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    totalDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnershipAtInit(
      proxyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferSusdTo(
      sender: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    whitelistedAddresses(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    activeMarkets(
      index: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    addWhitelistedAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    capitalRequirement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createMarket(
      oracleKey: BytesLike,
      strikePrice: BigNumberish,
      maturity: BigNumberish,
      initialMint: BigNumberish,
      customMarket: boolean,
      customOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    customMarketCreationEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decrementTotalDeposited(
      delta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    disableWhitelistedAddresses(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    durations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enableWhitelistedAddresses(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    expireMarkets(
      markets: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    incrementTotalDeposited(
      delta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _sUSD: string,
      _priceFeed: string,
      _expiryDuration: BigNumberish,
      _maxTimeToMaturity: BigNumberish,
      _creatorCapitalRequirement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isActiveMarket(candidate: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isKnownMarket(candidate: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPauseTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketCreationEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maturedMarkets(
      index: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    migrateMarkets(
      receivingManager: string,
      active: boolean,
      marketsToMigrate: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numActiveMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numMaturedMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onlyWhitelistedAddressesCanCreateMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionalMarketFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveMarkets(
      active: boolean,
      marketsToReceive: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    removeWhitelistedAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    resolveMarket(
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    sUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCreatorCapitalRequirement(
      _creatorCapitalRequirement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setCustomMarketCreationEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setExpiryDuration(
      _expiryDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMarketCreationEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMaxTimeToMaturity(
      _maxTimeToMaturity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMigratingManager(
      manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPaused(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPositionalMarketFactory(
      _positionalMarketFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWhitelistedAddresses(
      _whitelistedAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setsUSD(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    totalDeposited(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnershipAtInit(
      proxyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferSusdTo(
      sender: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    whitelistedAddresses(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
